                        	]=------ kernsh ------=[


Kernsh uses Libkernsh which is a library to play with kernel image in real 
time or on disk.

You can obtain all information necessary about kernel(syscalls, idt, gdt, 
symbols, ...), insert module inside the memory, hijack functions, etc

You can profite of eresi's language to define you own structure and 
communicate with the kernel.

Features :
	- Support Linux 2.X /dev/(k)mem
	- Read/Write anywhere in the kernel, direcly with eresi's language
	- Dismantling kernel memory with libasm
	- Alloc/Free kernel memory (contiguous and non contiguous)
	- ET_REL injection in kernel memory
	- Infect loadable kernel module
	-
	-


Depends libkernsh : libaspect, libelfsh
Depends kernsh : librevm, libaspect


[+] Installation


Compile Eresi with --enable-kernsh during configure. "make" and "make install".


By default, Libkernsh do the following action :
	- Load ~/.kernshrc
	- If libkernsh.without_kernel is set to 0
		- If libkernsh.use_kernel is set to 1 :
			- Open libkernsh.storagepath + libkernsh.kernelelf

		- Else :
			- Open libkernsh.storagepath + libkernsh.kernel
			- Extract/Gunzip it
			- Open the final kernel

	- Open memory device in libkernsh.device with mode libkernsh.mode 
		and mmap it if libkernsh.mmap is set to 1 (with a size of 
		libkernsh.mmap_size). Mmap is necessary to use all features.

	- Have fun !

You can define all the libkernsh.*, see section Options below.


[+] Portability :

 -------------------------------------------------------------
|   \  ARCH   |  IA32  |  SPARC  | SPARC64 |  MIPS  |  ALPHA  |
| OS \        |        |         |         |        |         |
 -------------------------------------------------------------
|  LINUX 2.4  |  DONE  |   UT    |   UT    |   UT   |   UT    |
|             |        |         |         |        |         |
 -------------------------------------------------------------
|  LINUX 2.6  |  DONE  |   UT    |   UT    |   UT   |   UT    |
|             |        |         |         |        |         |
 -------------------------------------------------------------
|    NETBSD   |  WIP   |         |         |        |         |
|             |        |         |         |        |         |
 -------------------------------------------------------------
|   FREEBSD   |  WIP   |         |         |        |         |
|             |        |         |         |        |         |
 -------------------------------------------------------------


[ 
 legends :
	- WIP		: 	Work In Progress
	- UT 		: 	Untested
]


[+] Commands : 
	- openmem :
		func 	:	open memory and by default gzip kernel	
		args 	:	no
		return 	:	int
		options  :

	- closemem :
		func	:	close memory
		args 	:	no
		return	:	int
		options :	/

	- mode :
		func	:	with no args display the mode
		args	:	yes (not obligatory), "static" and "dynamic"
		return  :	int
		options :	

	- sct :
		func :		handel the syscall table
		args :		-d : display syscall table
				-n : create new syscall table
		return :	no
		options :	/

	- idt :
		func :		handle the idt
		args :		-d : display the idt
		return :	no
		options :	/

	- gdt :
		func :		handle the gdt
		args :		-d : display the gdt
		return :	no
		options :	/

	- alloc :
		func :		alloc contiguous kernel memory
		args :		size (mandatory)
		return :	$_ is set with the return address
		options :	/

	- free :
		func :		free contiguous kernel memory
		args :		addr (mandatory)
		return :	$_ is set with the return value  
		options :	/

	- alloc_nc :
		func :		alloc non contiguous kernel memory
		args :		size (mandatory)
		return :	$_ is set with the return address
		options :	/

	- free_nc : 
		func :		free non contiguous kernel memory
		args :		addr (mandatory)
		return :	$_ is set with the return value
		options :	/

	- kmodule : 
		func : handle kernel module
		args : 
			-l : load a module with insmod
				sub args : module
				- module : module's pathname (mandatory)
			-u : unload a module with rmmod
				sub args : module
				- module : module's pathname (mandatory)
			-r : link module with another
				sub args : module1 module2 moduleres
				- module1 : first module's pathname (mandatory)
				- module2 : second module's pathname (mandatory)
				- moduleres : result of two modules (mandatory)
			-i : infect a module
				sub args : module original_name evil_name
				- module : module's pathname (mandatory)
				- original_name : name of the hijacked function
				- evil_name : name of the hijack function
		return :
		options : /

	- ksym :
		func :		get an address of a kernel symbol
		args :		symbol's name
		return :	$_ is set with the return address
		options :	/
	
	- virtm : IN PROGRESS
		func :
		args :
		return :
		options :

	- process : IN PROGRESS
		func :
		args : 
			-d : display linked list
			-c : check hidden process			
		return :
		options :

	- kmd5 : IN PROGRESS
		func :
		args :  sa output, sa:rva output, sa%rva%size output, 
			sa%size output, check:format, check input
			- sa : symbol or addr
				- special symbol : sct, idt, gdt
			- rva :
			- size :
			- output : file output
			- input : file input
			
		return :
		options :
	
[+] Options :

An option can be set directly in the shell or in the .kernshrc :
	configure libkernsh.option VALUE

[
 legends : (D) => default, 
	   (L) => specific to Linux, 
	   (N) => specific to Netbsd,
           (F) => specific to Freebsd 
	   
	   [S*] => any string value
	   [I*] => any integer value 
	   [L*] => any long value
]
	
	- libkernsh.device : The memory device which will be opened
		- /dev/mem (D)
		- /dev/kmem (L)
		- /proc/kcore (L)

	- libkernsh.mode : The mode to open the memory
		- read
		- write (D)
	
	- libkernsh.mmap : Mmap the memory (Must be USED to have all features)
		- 0
		- 1 (D)

	- libkernsh.mmap_size : Mmap's size of the main memory
		- 1000 * 1024 * 1024 (D)
		- [I*]
	
	- libkernsh.systemmap : (L) Path of the system map
		- /boot/System.map-`uname -r` (D)
		- [S*]

	- libkernsh.kernel : Path of the gzip kernel
		- /boot/vmlinuz (D) (L)
		- [S*]

	- libkernsh.gzipcmd : Which is the gzid command
		- /bin/gzip (D) (L)
		- [S*]

	- libkernsh.objcopycmd : Which is the objcopy command
		- /bin/objcopy (D) (L)
		- [S*]

	
	- libkernsh.ldcmd : Which is the ld command
		- /bin/ld (D) (L)
		- [S*]

	- libkernsh.kload : Which is the insert kernel module command
		- /bin/insmod (D) (L)
		- [S*]

	- libkernsh.kunload : Which is the remove kernel module command
		- /bin/rmmod (D) (L)
		- [S*]

	- libkernsh.kernelgz : The name to save the extract gzip kernel
		- vmlinuz.gz (D) (L)
		- [S*]		

	- libkernsh.kernelelf : The name of the extract/gunzip kernel
		- vmlinux (D) (L)
		- [S*]

	- libkernsh.storagepath : A path to store kernel and to 
				  open debug kernel
		- /tmp/ (D)
		- [S*]

	- libkernsh.nbsyscalls : The number of syscalls
		- 320 (D) (L)
		- [I*]

	- libkernsh.nilsyscalls : A position inside the syscall table 
				  of a free syscall
		- 17 (D) (L)
		- [I*]	

	- libkernsh.use_kernel : use the full debug kernel(not the gzip kernel)
		- 0 (D)
		- 1

	- libkernsh.without_kernel : not use the kernel, only memory
		- 0 (D)
		- 1

	- libkernsh.kernel_start : address of kernel start
		- 0xc0000000 (D) (L)
		- [L*]

	- libkernsh.kernel_end : address of kernel end
		- 0xc1000000 (D) (L)
		- [L*]

	- libkernsh.alloc : alloc/free contiguous memory(0) 
			    or non contiguous(1) 
		- 0 (D)
		- 1
[+] Kernshrc 

You can use a .kernshrc in your home directory. There is some kernshrc in doc
directory.

[+] Examples

See examples directory.

[+] Authors 

Original version (0.1 => 0.2c) started in 2001 and original authors : 
	sauron, zorgon, kstat

The project has been transfered to pouik in 2007.

[+] Contacts

Information about kernsh : support at kernsh.org

author's mail : pouik at kernsh.org

[+] Bugs

Please use http://bts.eresi-project.org/

Compile libkernsh in debug mode, change in libkernsh/include/libkernsh.h 
the define :
	#define	__DEBUG_KERNSH__			0
in
	#define	__DEBUG_KERNSH__			1
	

[+] Url

eresi : http://www.eresi-project.org

kernsh : http://www.kernsh.org

blog : http://blog.kernsh.org
