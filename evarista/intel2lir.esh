#!evarista/evarista32

# IA-32 general purpose registers -- must be set and not defined because they are string
set $EAX "eax"
set $EBX "ebx"
set $ECX "ecx"
set $EDX "edx"
set $ESP "esp"
set $EBP "ebp"
set $ESI "esi"
set $EDI "edi"
set $EFLAGS "eflags"

# IA-32 exceptional instruction
define NEG ASM_NEG

# IA-32 prolog instruction
define SUB ASM_SUB

# IA-32 epilog instruction
define MOV ASM_MOV

# This create on-demand the block instruction list in the eresi runtime
set $curaddr $1
set $begaddr $1
reflect $curaddr

# Just debug printing
#verb
#profile enable warn

# Start the transformation
foreach $instr of $hash[instrlists:$begaddr]

#print Transforming instruction: $instr
set $curlen $instr.len

D $begaddr%1

rewrite $instr into

# Prolog - SUB (ESP, imm)
case instr(instr:SUB, op2.name:$ESP), op1(sem:imm))
into Prolog(addr:$curaddr, framesz(val:$instr.op1.imm))

# Epilog - MOV (ESP, EBP)
case instr(instr:MOV, op2.name:$ESP), op1.name:$EBP)) 
into Epilog(addr:$curaddr)

# NEG (reg)
case instr(instr:NEG, op1(sem:reg)) 
into TernopR3(addr:$curaddr, dst(rid:$instr.op1.name), src1(rid:$instr.op1.name),
	      src2(rid:$instr.op1.name), uflags(val:$instr.wflags))

# NEG (mem)
case instr(instr:NEG, op1(sem:mem))
into TernopM3(addr:$curaddr, dst(name:$instr.op1.name base(rid:$instr.op1.name),
	      index(rid:$instr.op1.name), scale(val:$instr.op1.scale), off(val:$instr.op1.imm)),
	      msrc1(name:$instr.op1.name base(rid:$instr.op1.name),
	      index(rid:$instr.op1.name), scale(val:$instr.op1.scale), off(val:$instr.op1.imm)),
              msrc2(name:$instr.op1.name base(rid:$instr.op1.name), index(rid:$instr.op1.name),
              scale(val:$instr.op1.scale), off(val:$instr.op1.imm)), uflags(val:$instr.wflags))

# INC, DEC (reg)
case instr(sem:ar-id-wf, nb_op:1, op1(sem:reg)) 
into TernopRI(addr:$curaddr, dst(rid:$instr.op1.name), rsrc(rid:$instr.op1.name),
              isrc(val:1), uflags(val:$instr.wflags))

# INC, DEC (mem)
case instr(sem:ar-id-wf, nb_op:1, op1(sem:mem)) 
into TernopMI(addr:$curaddr, dst(rid:$instr.op1.name),
              msrc(name:$instr.op1.name base(rid:$instr.op1.name), index(rid:$instr.op1.name),
              scale(val:$instr.op1.scale), off(val:$instr.op1.imm)), isrc(val:1),
              uflags(val:$instr.wflags))

# AAA, AAD, AAM, AAS, DAD, DAS
case instr(sem:ar-wf, nb_op:0) 
into TernopR3(addr:$curaddr, dst(rid:$EAX), src1(rid:$EAX), src2(rid:$EAX), uflags(val:$instr.wflags))

# ADC, ADD, AND, OR, RCR, ROL ROR, SAR, SBB, SHL, SHR, SUB, XOR (reg, reg)
case instr(sem:ar-wf, nb_op:2, op1(sem:reg), op2(sem:reg)) 
into TernopR3(addr:$curaddr, dst(rid:$instr.op2.name), src1(rid:$instr.op2.name),
              src2(rid:$instr.op1.name), uflags(val:$instr.wflags))

# ADC, ADD, AND, OR, RCR, ROL ROR, SAR, SBB, SHL, SHR, SUB, XOR (reg, imm)
case instr(sem:ar-wf, nb_op:2, op1(sem:imm), op2(sem:reg)) 
into TernopRI(addr:$curaddr, dst(rid:$instr.op2.name), rsrc(rid:$instr.op2.name),
              isrc(val:$instr.op1.imm), uflags(val:$instr.wflags))

# ADC, ADD, AND, OR, RCR, ROL ROR, SAR, SBB, SHL, SHR, SUB, XOR (reg, mem)
case instr(sem:ar-wf, nb_op:2, op1(sem:mem), op2(sem:reg)) 
into TernopRM(addr:$curaddr, dst(rid:$instr.op2.name), rsrc(rid:$instr.op2.name),
              msrc(name:$instr.op1.name base(rid:$instr.op1.name), index(rid:$instr.op1.name),
              scale(val:$instr.op1.scale), off(val:$instr.op1.imm)), uflags(val:$instr.wflags))

# ADC, ADD, AND, OR, RCR, ROL ROR, SAR, SBB, SHL, SHR, SUB, XOR (mem, imm)
case instr(sem:ar-wf, nb_op:2, op1(sem:imm), op2(sem:mem)) 
into TernopMI(addr:$curaddr, dst(name:$instr.op2.name, base(rid:$instr.op2.name),
              index(rid:$instr.op2.name), scale(val:$instr.op2.scale), off(val:$instr.op2.imm)),
              msrc(name:$instr.op2.name, base(rid:$instr.op2.name), index(rid:$instr.op2.name),
              scale(val:$instr.op2.scale), off(val:$instr.op2.imm)), isrc(val:$instr.op1.imm),
              uflags(val:$instr.wflags))

# ADC, ADD, AND, OR, RCR, ROL ROR, SAR, SBB, SHL, SHR, SUB, XOR (mem, reg)
case instr(sem:ar-wf, nb_op:2, op1(sem:reg), op2(sem:mem)) 
into TernopMR(addr:$curaddr, dst(name:$instr.op2.name base(rid:$instr.op2.name),
              index(rid:$instr.op2.name), scale(val:$instr.op2.scale), off(val:$instr.op2.imm)),
              msrc(name:$instr.op2.name base(rid:$instr.op2.name), index(rid:$instr.op2.name),
              scale(val:$instr.op2.scale), off(val:$instr.op2.imm)), rsrc(rid:$instr.op1.name),
              uflags(val:$instr.wflags))

# IMUL (reg, reg, imm)
case instr(sem:ar-wf, nb_op:3, op1(sem:imm), op2(sem:reg), op3(sem:reg)) 
into TernopRI(addr:$curaddr, dst(rid:$instr.op3.name), rsrc(rid:$instr.op2.name),
              isrc(val:$instr.op1.imm), uflags(val:$instr.wflags))

# IMUL (reg, mem, imm)
case instr(sem:ar-wf, nb_op:3, op1(sem:imm), op2(sem:mem), op3(sem:reg)) 
into TernopRMI(addr:$curaddr, dst(rid:$instr.op3.name), 
               msrc(name:$instr.op2.name base(rid:$instr.op2.name), index(rid:$instr.op2.name),
               scale(val:$instr.op2.scale), off(val:$instr.op2.imm)), isrc(val:$instr.op1.imm),
               uflags(val:$instr.wflags))

# MUL, IMUL (reg)
case instr(sem:ar-wf, nb_op:1, op1(sem:reg)) 
into TernopR3(addr:$curaddr, dst(rid:$EAX), src1(rid:$instr.op1.name), src2(rid:$EAX),
              uflags(val:$instr.wflags)

# MUL, IMUL (mem)
case instr(sem:ar-wf, nb_op:1, op1(sem:mem)) 
into TernopR3(addr:$curaddr, dst(rid:$EAX), src1((name:$instr.op1.name base(rid:$instr.op1.name),
              index(rid:$instr.op1.name), scale(val:$instr.op1.scale), off(val:$instr.op1.imm))),
              src2(rid:$EAX), uflags(val:$instr.wflags))

# CWD, CBW
case instr(sem:ar, nb_op:0) 
into TernopR3(addr:$curaddr, dst(rid:$EAX), src1(rid:$EAX), src2(rid:$EAX))

# LEA (reg, mem)
case instr(sem:ar, nb_op:2) 
into TernopRM(addr:$curaddr, dst(rid:$instr.op1.name), rsrc(rid:$instr.op1.name),
              msrc((name:$instr.op1.name, base(rid:$instr.op1.name), index(rid:$instr.op1.name),
                    scale(val:$instr.op1.scale), off(val:$instr.op1.imm))))

# NOT, DIV, IDIV (reg)
case instr(sem:ar, nb_op:1, op1(sem:reg)) 
into TernopR3(addr:$curaddr, dst(rid:$EAX), src1(rid:$EAX), src2(rid:$instr.op1.name))

# NOT, DIV, IDIV (mem)
case instr(sem:ar, nb_op:1, op1(sem:mem)) 
into TernopRM(addr:$curaddr, dst(rid:$EAX), rsrc(rid:$EAX),
              msrc((name:$instr.op1.name base(rid:$instr.op1.name), index(rid:$instr.op1.name),
              scale(val:$instr.op1.scale), off(val:$instr.op1.imm))))

# CALL (reg) -- FIXME manque le store de la valeur de retour
case instr(sem:wm-c, op1(sem:reg)) 
into IndCallR(addr:$curaddr, dst(rid:$instr.op1.name), uflags(val:0))

# CALL (mem) -- FIXME manque le store de la valeur de retour
case instr(sem:wm-c, op1(sem:mem)) 
into IndCallM(addr:$curaddr, dst(name:$instr.op1.name, base(rid:$instr.op1.name),
              index(rid:$instr.op1.name), scale(val:$instr.op1.scale), off(val:$instr.op1.imm)))

# CALL (imm) -- FIXME manque le store de la valeur de retour
case instr(sem:wm-c, op1(sem:imm)) 
into Call(addr:$curaddr, dst(val:$instr.op1.imm), uflags(val:0))

# CMP, TEST (reg, imm)
case instr(sem:wm-cmp-wr, op1(sem:imm), op2(sem:reg)) 
into CmpRI(addr:$curaddr, snd(rid:$instr.op2.name), fst(val:$instr.op1.imm), uflags(val:$instr.wflags))

# CMP, TEST, CMPSB, CMPSD, SCASB, SCASD (reg, reg)
case instr(sem:cmp-wr, op1(sem:reg), op2(sem:reg)) 
into CmpRR(addr:$curaddr, snd(rid:$instr.op2.name), fst(rid:$instr.op1.name), uflags(val:$instr.wflags))

# CMP (reg, mem)
case instr(sem:cmp-wr, op1(sem:mem), op2(sem:reg)) 
into CmpRM(addr:$curaddr, snd(rid:$instr.op2.name), fst(name:$instr.op1.name, base(rid:$instr.op1.name),
           index(rid:$instr.op1.name), scale(val:$instr.op1.scale), off(val:$instr.op1.imm)), 
           uflags(val:$instr.wflags))

# CMP, TEST (mem, reg)
case instr(sem:cmp-wr, op1(sem:reg), op2(sem:mem)) 
into CmpMR(addr:$curaddr, snd((name:$instr.op2.name, base(rid:$instr.op2.name),
           index(rid:$instr.op2.name), scale(val:$instr.op2.scale), off(val:$instr.op2.imm))),
           fst(rid:$instr.op1.name), uflags(val:$instr.wflags))

# TEST (mem, imm)
case instr(sem:cmp-wr, op1(sem:imm), op2(sem:mem)) 
into CmpMI(addr:$curaddr, snd(name:$instr.op2.name, base(rid:$instr.op2.name),
           index(rid:$instr.op2.name), scale(val:$instr.op2.scale), off(val:$instr.op2.imm)),
           fst(val:$instr.op1.imm), uflags(val:$instr.wflags))

# HLT
case instr(sem:s) 
into Stop(addr:$curaddr)

# IN (reg, reg)
case instr(sem:io-rm, op1(sem:reg)) 
into IoRR(addr:$curaddr, dst(rid:$instr.op2.name), src(rid:$instr.op1.name))

# IN (reg, imm)
case instr(sem:io-rm, op1(sem:imm)) 
into IoRI(addr:$curaddr, dst(rid:$instr.op2.name), src(val:$instr.op1.imm))

# INTO
case instr(sem:i-rf-bt) 
into Interrupt(addr:$curaddr, dst(val:4))

# IRET
case instr(sem:i-r) 
into IReturn(addr:$curaddr)

# INT3
case inst_t(sem:i, nb_op:0) 
into Interrupt(addr:$curaddr, dst(val:3))

# INT (imm)
case instr(sem:i) 
into Interrupt(addr:$curaddr, dst(val:$instr.op1.imm))

# Jxx, LOOP, LOOPE, LOOPNE (imm)
# Jxx = JA, JAE, JB, JBE, JE, JECXZ, JG, JGE, JL, JLE, JNE, JNO, JNP, JNS, JO, JP, JS
case instr(sem:b-cnd) 
into Branch(addr:$curaddr, dst(val:$instr.op1.imm))

# JMP (imm)
case instr(sem:b, op1(sem:imm)) 
into Branch(addr:$curaddr, dst(val:$instr.op1.imm))

# JMP (reg)
case instr(sem:b, op1(sem:reg)) 
into IndBranchR(addr:$curaddr, dst(rid:$instr.op1.name))

# JMP (mem)
case instr(sem:b, op1(sem:mem)) 
into IndBranchM(addr:$curaddr, dst((name:$instr.op1.name, base(rid:$instr.op1.name),
                index(rid:$instr.op1.name), scale(val:$instr.op1.scale), off(val:$instr.op1.imm))))

# MOVSB, MOVSD (mem, mem)
case instr(sem:a-rm-wm) 
into AssignMM(addr:$curaddr, dst((name:$instr.op2.name, base(rid:$instr.op2.name),
              index(rid:$instr.op2.name), scale(val:$instr.op2.scale), off(val:$instr.op2.imm))),
              src((name:$instr.op1.name, base(rid:$instr.op1.name), index(rid:$instr.op1.name),
              scale(val:$instr.op1.scale), off(val:$instr.op1.imm))))

# NOP, WAIT/FWAIT
case instr(sem:n) 
into Nop(addr:$curaddr, uflags(val:0)

# OUT (reg, reg)
case instr(sem:io-wm, op2(sem:reg)) 
into IoRR(addr:$curaddr, dst(rid:$instr.op2.name), src(rid:$instr.op1.name))

# OUT (imm, reg)
case instr(sem:io-wm, op2(sem:imm)) 
into IoIR(addr:$curaddr, dst(val:$instr.op2.imm), src(rid:$instr.op1.name))

# POP (reg)
case instr(sem:sp-rm, op1(sem:reg)) 
into AssignRM(addr:$curaddr, dst(rid:$instr.op1.name), src(base(rid:$ESP)))

# POP (mem)
case instr(sem:sp-rm, op1(sem:mem)) 
into AssignMM(addr:$curaddr, dst((name:$instr.op1.name base(rid:$instr.op1.name),
              index(rid:$instr.op1.name), scale(val:$instr.op1.scale), off(val:$instr.op1.imm))),
              src(base(rid:$ESP)))

# PUSH (reg)
case instr(sem:sp-wm, op1(sem:reg)) 
into AssignMR(addr:$curaddr, dst(base(rid:$ESP)), src(rid:$instr.op1.name))

# PUSH (imm)
case instr(sem:sp-wm, op1(sem:imm)) 
into AssignIM(addr:$curaddr, dst(base(rid:$ESP)), src(val:$instr.op1.imm))

# PUSHF
case instr(sem:sp-wm-rf) 
into AssignMR(addr:$curaddr, dst(base(rid:$ESP)), src(rid:$EFLAGS), uflags(val:$instr.rflags))

# POPF
case instr(sem:sp-rm-wf) 
into AssignRM(addr:$curaddr, dst(rid:$EFLAGS), src(base(rid:$ESP)), uflags(val:$instr.wflags))

# RET, RETF
case instr(sem:r) 
into Return(addr:$curaddr, dst(val:0))

# XCHG (reg, reg)
case instr(sem:wm-rm, op2(sem:reg)) 
into XchgRR(addr:$curaddr, fst(rid:$instr.op2.name), snd(rid:$instr.op1.name), uflags(val:0))

# XCHG (mem, reg)
case instr(sem:wm-rm, op2(sem:mem)) 
into XchgMR(addr:$curaddr, fst((name:$instr.op2.name base(rid:$instr.op2.name),
            index(rid:$instr.op2.name), scale(val:$instr.op2.scale), off(val:$instr.op2.imm))),
            snd(rid:$instr.op1.name))

# XLATB
case instr(sem:a-rm) 
into AssignRM(addr:$curaddr, dst(rid:$EAX), src(base(rid:$EBX), index(rid:$EAX)), uflags(val:0))

# STOSB, STOSD (mem, reg)
case instr(sem:wm) 
into AssignMR(addr:$curaddr, dst((name:$instr.op2.name base(rid:$instr.op2.name),
              index(rid:$instr.op2.name), scale(val:$instr.op2.scale), off(val:$instr.op2.imm))),
              src(rid:$instr.op1.name))

# MOV (imm, reg)
case instr(sem:a, op1(sem:imm), op2(sem:reg))
into AssignIR(addr:$curaddr, dst(rid:$instr.op2.name), src(val:$instr.op1.imm), uflags(val:0))

# MOV (mem, reg)
case instr(sem:a, op1(sem:mem), op2(sem:reg)) 
into AssignRM(addr:$curaddr, dst(rid:$instr.op2.name), src(name:$instr.op1.name,
              base(rid:$instr.op1.name), index(rid:$instr.op1.name), scale(val:$instr.op1.scale),
              off(val:$instr.op1.imm)), uflags(val:0))

# MOV (reg, reg)
case instr(sem:a, op1(sem:reg), op2(sem:reg)) 
into AssignRR(addr:$curaddr, dst(rid:$instr.op2.name), src(rid:$instr.op1.name), uflags(val:0))

# MOV (reg, mem)
case instr(sem:a, op1(sem:reg), op2(sem:mem)) 
into AssignMR(addr:$curaddr, dst((name:$instr.op2.name, base(rid:$instr.op2.name),
              index(rid:$instr.op2.name), scale(val:$instr.op2.scale), off(val:$instr.op2.imm))),
              src(rid:$instr.op1.name), uflags(val:0))

# MOV (mem, imm)
case instr(sem:a, op1(sem:mem), op2(sem:imm)) 
into AssignIM(addr:$curaddr, dst((name:$instr.op1.name, base(rid:$instr.op1.sbaser),
              index(rid:$instr.op1.sindex), scale(val:$instr.op1.scale), off(val:$instr.op1.imm))),
              src(val:$instr.op2.imm), uflags(val:0))

# LDS, LES (reg, imm)
case instr(sem:rm, op1(sem:imm)) 
into AssignIR(addr:$curaddr, dst(rid:$instr.op2.name), src(val:$instr.op1.imm), uflags(val:0))

# LODSB, LODSD (reg, mem)
case instr(sem:rm) 
into AssignRM(addr:$curaddr, dst(rid:$instr.op2.name), 
              src((name:$instr.op1.name, base(rid:$instr.op1.name), index(rid:$instr.op1.name),
                   scale(val:$instr.op1.scale), off(val:$instr.op1.imm))), uflags(val:0))

# LAHF
case instr(sem:rf) 
into FlagR(addr:$curaddr, uflags(val:$instr.rflags))

# CLC, CLD, CLI, CMC, SAHF, STC, STD, STI
case instr(sem:wf) 
into FlagW(addr:$curaddr, uflags(val:$instr.rflags))

# Defaultcase
#profile enable warn
default print Unsupported instruction $instr

rwtend

add $curaddr $curlen

forend

quiet

