#!evarista/evarista32
#
# Definition for the ELIR form
#

# Attributes for ASM instructions
define non  ASM_TYPE_NONE
define b    ASM_TYPE_BRANCH
define c    ASM_TYPE_CALLPROC
define r    ASM_TYPE_RETPROC
define ar   ASM_TYPE_ARITH
define rm   ASM_TYPE_LOAD
define wm   ASM_TYPE_STORE
define arch ASM_TYPE_ARCH
define wf   ASM_TYPE_WRITEFLAG
define rf   ASM_TYPE_READFLAG
define i    ASM_TYPE_INT
define a    ASM_TYPE_ASSIGN
define cmp  ASM_TYPE_COMPARISON
define ctrl ASM_TYPE_CONTROL
define n    ASM_TYPE_NOP
define sp   ASM_TYPE_TOUCHSP
define bt   ASM_TYPE_BITTEST
define bs   ASM_TYPE_BITSET
define id   ASM_TYPE_INCDEC
define p    ASM_TYPE_PROLOG
define e    ASM_TYPE_EPILOG
define s    ASM_TYPE_STOP
define io   ASM_TYPE_IO
define cnd  ASM_TYPE_CONDCONTROL
define ind  ASM_TYPE_INDCONTROL
define oth  ASM_TYPE_OTHER

# Attributes for ASM operands
define reg	ASM_OPTYPE_REG
define imm	ASM_OPTYPE_IMM
define mem	ASM_OPTYPE_MEM

# Types of LIR operands
type Immed             = val:long
type Addr              = val:caddr
type Reg::container    = rid:string
type Mem::container    = base:Reg off:Immed name:string index:Reg scale:Immed
type Ins               = uflags:Immed addr:caddr szaffect:byte

# Types of LIR instructions

# Control-flow operations
type IndBranchR::Ins = dst:Reg
type IndBranchM::Ins = dst:Mem
type Branch::Ins     = dst:Addr
type Call::Ins       = dst:Addr
type IndCallR::Ins   = dst:Reg
type IndCallM::Ins   = dst:Mem
type Interrupt::Ins  = dst:Immed
type Return::Ins     = dst:Immed

# Ternary operations
type Ternop::Ins      = op:int
type TernopMI::Ternop = dst:Mem msrc:Mem isrc:Immed
type TernopMR::Ternop = dst:Mem msrc:Mem rsrc:Reg
type TernopRM::Ternop = dst:Reg rsrc:Reg msrc:Mem
type TernopRMI::Ternop = dst:Reg rsrc:Reg msrc:Mem isrc:Immed
type TernopR3::Ternop = dst:Reg src1:Reg src2:Reg
type TernopM3::Ternop = dst:Mem msrc1:Mem msrc2:Mem
type TernopRI::Ternop = dst:Reg rsrc:Reg isrc:Immed

# Assignments
type AssignIR::Ins  = dst:Reg src:Immed
type AssignIM::Ins  = dst:Mem src:Immed
type AssignMR::Ins  = dst:Reg src:Mem
type AssignRM::Ins  = dst:Mem src:Reg
type AssignMM::Ins  = dst:Mem src:Mem
type AssignRR::Ins  = dst:Reg src:Reg

# Comparisons
type CmpRI::Ins     = fst:Immed snd:Reg
type CmpRR::Ins     = fst:Reg snd:Reg
type CmpRM::Ins     = fst:Mem snd:Reg
type CmpMR::Ins     = fst:Reg snd:Mem
type CmpMI::Ins     = fst:Immed snd:Mem

# Other special operations
type XchgRR::Ins    = fst:Reg snd:Reg
type XchgMR::Ins    = fst:Mem snd:Reg
type Prolog::Ins    = framesz:Immed
type BitSet::Ins    = src:Immed dst:Reg
type IoRR::Ins      = dst:Reg src:Reg
type IoIR::Ins      = dst:Immed src:Reg
type IoRI::Ins      = dst:Reg src:Immed

# Types that have no additional info than an instruction
typedef Ins IReturn
typedef Ins FlagR
typedef Ins FlagW
typedef Ins Epilog
typedef Ins Stop
typedef Ins Nop

quiet