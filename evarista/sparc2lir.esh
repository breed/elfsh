#!evarista/evarista32
#
# This create on-demand the block instruction list in the eresi runtime
#

#print Now SPARC2LIR at addr $curaddr
#quiet
#verb

set $curaddr $1
set $begaddr $1
reflect $curaddr

#tables instrlists 0001076C
#exec sleep 20

# Start the transformation
foreach $instr of $hash[instrlists:$begaddr]

#print TRANSFORMING instruction $instr at addr $curaddr
#D $curaddr%1
print $instr

rewrite $instr into

# indirect always branch without link
case instr(sem:b, nb_op:1, op1(sem:reg))
into IndBranchR(addr:$curaddr, dst(rid:$instr.op1.baser))

# direct always branch (b, bp) 										
case instr(sem:b, nb_op:1, op1(sem:imm))
into Branch(addr:$curaddr, dst(val:$instr.op1.imm))

# direct always branch (b, bp) with 2 parameters					
# XXX lacks flag translation
case instr(sem:b, nb_op:2, op1(sem:imm))
into Branch(addr:$curaddr, dst(val:$instr.op1.imm))

# indirect conditional branch without link
# XXX lacks flag translation
case instr(sem:b-cnd, nb_op:1, op1(sem:reg))
into IndBranchR(addr:$curaddr, dst(rid:$instr.op1.baser))

# direct always branch (bcc, bpcc) 					
# XXX lacks flag translation
case instr(sem:b-cnd, nb_op:1, op1(sem:imm))
into Branch(addr:$curaddr, dst(val:$instr.op1.imm))

# direct always branch (bcc, bpcc) with 2 args 					
# XXX lacks flag translation
case instr(sem:b-cnd, nb_op:2, op1(sem:imm))
into Branch(addr:$curaddr, dst(val:$instr.op1.imm))::
     Nop(addr:$curaddr)

# indirect call (op1 reg) 								
case instr(sem:c, nb_op:1, op1(sem:reg))
into IndCallR(addr:$curaddr, dst(rid:$instr.op1.baser))

# direct call (op1 addr) 									
case instr(sem:c, nb_op:1, op1(sem:imm))
into Call(addr:$curaddr, dst(val:$instr.op1.imm))

# ta* (traps)
case instr(sem:i)
into Interrupt(addr:$curaddr, dst(val:$instr.op1.imm))

# ret, retl 									 		
case instr(sem:r)
into Return(addr:$curaddr, dst(val:$instr.op1.imm))

# save 												
case instr(sem:p)
into Prolog(addr:$curaddr, framesz:$instr.op2.imm)

# restore 												
case instr(sem:e)
into Epilog(addr:$curaddr)

# illtrap 							 			
case instr(sem:s)
into Stop(addr:$curaddr)

# nop											 		
case instr(sem:n)
into Nop(addr:$curaddr)

# andcc,subcc,orcc,addcc,inccc,deccc (op2 = reg)				 		
# XXX: lack flags translation
case instr(sem:ar-wf, nb_op:3, op2(sem:reg))
into TernopR3(addr:$curaddr, dst(rid:$instr.op1.name), src1(rid:$instr.op2.name), src2(rid:$instr.op3.name), uflags:$instr.flags)

# andcc,subcc,orcc,addcc,inccc,deccc (op2 = immed)
# XXX: lack flags translation
case instr(sem:ar-wf, nb_op:3, op2(sem:imm))
into TernopRI(addr:$curaddr, dst(rid:$instr.op1.name), isrc(val:$instr.op2.imm), rsrc(rid:$instr.op3.name), uflags:$instr.flags)

# sllx,sll,srl,srlx,add,sub,or,xor,and,sdivx,udivx,sra,srax,mulx (op2 immed) 					 		
case instr(sem:ar, nb_op:3, op2(sem:imm))
into TernopRI(addr:$curaddr, dst(rid:$instr.op1.name), isrc(val:$instr.op2.imm), rsrc(rid:$instr.op3.name))

# sllx,sll,srl,srlx,add,sub,or,xor,and,sdivx,udivx,sra,srax,mulx (op2 reg)  						 	
case instr(sem:ar, nb_op:3, op2(sem:reg))
into TernopR3(addr:$curaddr, dst(rid:$instr.op1.name), src1(rid:$instr.op2.name), src2(rid:$instr.op3.name))

# clrx, clrh, clrb, clr (op1 = reg)  										 	
case instr(sem:ar, nb_op:1, op1(sem:reg))
into AssignIR(addr:$curaddr, dst(rid:$instr.op1.name), src(val:0))

# clrx, clrh, clrb, clr (op1 = mem)  										 		
case instr(sem:ar-wm, nb_op:1, op1(sem:mem)) 
into AssignIM(addr:$curaddr, dst(name:$instr.op1.name base(rid:$instr.op1.sbaser), off(val:$instr.op1.imm)), isrc(val:0))

# set(hi)										 		
case instr(sem:a, nb_op:2, op1(sem:reg), op2(sem:imm))
into AssignIR(addr:$curaddr, dst(rid:$instr.op1.name), src(val:$instr.op2.imm))

# mov
case instr(sem:a, nb_op:2, op1(sem:reg), op2(sem:reg))
into AssignRR(addr:$curaddr, dst(rid:$instr.op1.name), src(rid:$instr.op2.name))

# btog immed 														
case instr(sem:ar, nb_op:2, op1(sem:imm))
into TernopRI(addr:$curaddr, dst(rid:$instr.op2.name), isrc(val:$instr.op1.imm), rsrc(rid:$instr.op2.name))

# btog register 												 		
case  instr(sem:ar, nb_op:2, op1(sem:reg))
into TernopR3(addr:$curaddr, dst(rid:$instr.op2.name), src1(rid:$instr.op1.name), src2(rid:$instr.op2.name))

# ld,ldd,ldub,ldx,lduw,lduh,ldsw,ldsb  									 		
case instr(sem:a-rm)
into AssignMR(addr:$curaddr, src(name:$instr.op2.name, base(rid:$instr.op2.sbaser), off(val:$instr.op2.imm)), dst(rid:$instr.op1.name))

# st,stb,stw,sth,std,stx (src = reg)
case instr(sem:a-wm, op2(sem:reg))
into AssignRM(addr:$curaddr, src(rid:$instr.op2.name), dst(name:$instr.op1.name, base(rid:$instr.op1.sbaser), off(val:$instr.op1.imm)))

# st,stb,stw,sth,std,stx (src = immed)
case instr(sem:a-wm, op2(sem:imm))
into AssignIM(addr:$curaddr, src(val:$instr.op2.imm), dst(name:$instr.op1.name base(rid:$instr.op1.sbaser), off(val:$instr.op1.imm)))

# bset (op1 immed) 																
case instr(sem:bs, op1(sem:reg), op2(sem:imm))
into BitSet(addr:$curaddr, src(val:$instr.op2.imm), dst(rid:$instr.op1.name))

# tst (implicit 2e operand = immed 0 !) 											 		
case instr(sem:cmp, nb_op:1, op1(sem:reg)) 
into CmpRI(addr:$curaddr, snd(rid:$instr.op1.name), fst(val:0))

# cmp (op2 register)
# XXX lacks flag translation
case instr(sem:cmp-wf, nb_op:2, op1(sem:reg), op2(sem:reg))
into CmpRR(addr:$curaddr, fst(rid:$instr.op1.name), snd(rid:$instr.op2.name))

# cmp (op2 immed) 										 		
# XXX lacks flag translation
case instr(sem:cmp-wf, nb_op:2, op1(sem:imm), op2(sem:reg))
into CmpRI(addr:$curaddr, snd(rid:$instr.op2.name), fst(val:$instr.op1.imm))

# Defaultcase 								  
default print Unsupported instruction at address $curaddr $instr

rwtend

#print TRANSFORMED instruction:
#print $instr

add $curaddr 4 

forend

quiet
