#!/bin/sh
#
# Homemade configure file for the ELF shell project
#
# The ELFsh crew.
#

CHOSENBIT="0"
STATIC="0"
READLN="0"
ELFSHNET="0"
LIBMJOLLNIR="1"
PREFIX="/"
OSVER=`uname -r | cut -d "." -f1`

CONFIGFILE="config.h"
VARSFILE="librevm/include/revm-vars.h"
LIBVARSFILE="libelfsh/include/libvars.h"
LPTHREAD="-lpthread"

echo > $LIBVARSFILE
echo > $VARSFILE
echo > $CONFIGFILE

while [ $# -ne 0 ]; do

case $1 in

--enable-32-64*)
if [ $CHOSENBIT = "1" ]; then
    echo
    echo "Error: enable-32 and enable-64 are incompatible."
    echo
    rm -f $CONFIGFILE
    exit
fi
echo  " [*] Enabling ELF64/ELF32 support"
BITS="-DELFSH64"
echo  "//#define ELFSH64 1"			>> $LIBVARSFILE
CHOSENBIT="1"
BUILD_TARGET=""
;;

--enable-64*)
if [ $CHOSENBIT = "1" ]; then
    echo
    echo "Error: enable-32 and enable-64 are incompatible."
    echo
    rm -f $CONFIGFILE
    exit
fi
echo  " [*] Enabling ELF64 support"
BITS="-DELFSH64"
echo  "//#define ELFSH64 1"			>> $LIBVARSFILE
CHOSENBIT="1"
BUILD_TARGET=all64
;;

--enable-32*)
if [ $CHOSENBIT = "1" ]; then
    echo
    echo "Error: enable-32 and enable-64 are incompatible."
    echo
    rm -f $CONFIGFILE
    exit
fi
echo  " [*] Enabling ELF32 support"
BITS="-DELFSH32"

echo  "//#define ELFSH32 1"		>> $LIBVARSFILE
CHOSENBIT="1"
BUILD_TARGET=all32
;;

--enable-network*)
echo  " [*] Enable distributed ELFsh"
ELFSHNET="1"
echo  "LDDUMPOPT		= -ldumpelfsh"		>> $CONFIGFILE
BITS=$BITS" -DELFSHNET"
;;

--enable-readline*)
echo  " [*] Enabling readline support"
READLN="1"
echo  "READLNOPT	= -DUSE_READLN"		>> $CONFIGFILE
echo  "LDREADLNOPT	= -lreadline -ltermcap" >> $CONFIGFILE
;;

--enable-ncurses*)
echo  " [*] Enabling ncurses support"
READLN="1"
echo  "NCURSESLNOPT	= -DUSE_UI"		>> $CONFIGFILE
echo  "LDNCURSESLNOPT	= -lncurses"		>> $CONFIGFILE
;;

--enable-termcap*)
echo " [*] Enabling termcap support"
TERMCAP="1"
echo  "LDREADLNOPT  += -ltermcap" >> $CONFIGFILE
;;

--enable-static*)
echo  " [*] Enabling static linking"
echo  "STATOPT		= -static"              >> $CONFIGFILE
echo  "STATOPT2		= -DUSE_STATIC"		>> $CONFIGFILE
STATIC="1"
;;

--enable-dmalloc*)
echo  " [*] Enabling dmalloc linking"
echo  "EXTRAOPT		= $EXTRAOPT -ldmalloc"  >> $CONFIGFILE
;;

--enable-m64*)
echo  " [*] Enabling ELFsh 64bits binary built"
echo  "BUILDOPT		= -m64 -DM64"		>> $CONFIGFILE
M64="1"
;;

--use-etags*)
echo  " [*] Enabling etags support"
ETAGS="1"
;;

--use-ctags*)
echo  " [*] Enabling etags support"
CTAGS="1"
;;

--set-shell*)
shift
echo  " [*] Setting UNIX shell to " $1
echo  "#define ELFSH_SHELL        " $1		>> $VARSFILE
SHELLSET="1"
;;

--set-editor*)
shift
echo  " [*] Setting editor to " $1
echo  "#define ELFSH_EDITOR        " $1		>> $VARSFILE
EDITORSET="1"
;;

--set-modpath*)
shift
echo " [*] Setting ELFsh modules path to " $1
echo "#define ELFSH_MODPATH              " $1   >> $VARSFILE
MODPATHSET="1"
;;

--set-lib-path*)
shift
echo " [*] Setting ELFsh library search path to " $1
echo "#define ELFSH_LIBPATH    		 " $1  >> $VARSFILE
LIBPATHSET="1"
;;

--enable-stripped-log*)
shift
echo " [*] Enable stripped log"
echo "#define ELFSH_SLOG 1" 		      >> $VARSFILE
SLOGSET="1";
;;

--prefix*)
shift
echo " [*] Prefix:  " $1
PREFIX=$1
;;

--help*)
CHOSENBIT="0"
break;
;;

*)
echo "Invalid configure option. Try --help."
echo
rm -f $CONFIGFILE Makefile
exit

esac;

shift

done

#
# test for make/gmake support
#
if [ -z "$(which gmake)" ] ; then
echo "MAKE=make" >> $CONFIGFILE
else
echo "MAKE=gmake" >> $CONFIGFILE
fi

if [ $CHOSENBIT = "0" ]; then
    echo "Error: you MUST specify --enable-32, --enable-64 OR --enable-32-64."
    echo
    echo "   Available parameters :" 
    echo
    echo "   --enable-32-64    : Build both ELF32/64 capable shell."
    echo "   --enable-32       : Build a ELF32 capable shell."
    echo "   --enable-64       : Build a ELF64 capable shell."
    echo "   --enable-readline : Link with readline"
    echo "   --enable-network  : Build the distributed extension."
    echo "   --enable-static   : Link in static."
    echo "   --enable-dmalloc  : Link with Electric Fence."
    echo "   --enable-m64      : Build ELFsh itself as 64bits binary (default: 32bits)"
    echo "   --use-etags       : Use etags"
    echo "   --use-ctags       : Use ctags"
    echo
    echo "   Available variables :"
    echo
    echo "   --set-shell       : Set your UNIX shell path."
    echo "   --set-editor      : Set your editor path."
    echo "   --set-modpath     : Set your ELFsh modules path."
    echo "   --prefix          : Set prefix."
    echo
    echo "   All options are disabled by default."
    echo
    rm -f $CONFIGFILE $VARSFILE Makefile
    exit
fi

#if  [ $READLN = "1" -a $ELFSHNET = "1" ]; then
#    echo
#    echo "Error: Readline and Distributed ELFsh are incompatible."
#    echo
#    rm -f $CONFIGFILE $VARSFILE
#    exit
#fi

# Now do the OS dependant configuration
case `uname` in

SunOS*)

if [ "$STATIC" = "0" ]; then
    echo  " [*] Enabling dynamic linking."
    echo  "DLOPT		= -ldl"   >> $CONFIGFILE
fi

    EXTRAOPT="$EXTRAOPT -lnsl -lsocket -lresolv"
    echo "EXTRAOPT = " $EXTRAOPT	  >> $CONFIGFILE
    echo "RANLIB  = ranlib"               >> $CONFIGFILE

	;;

Linux*)

    echo "RANLIB  = ranlib"               >> $CONFIGFILE
if [ "$STATIC" = "0" ]; then
    echo  " [*] Enabling dynamic linking."
    echo  "DLOPT		= -ldl"       >> $CONFIGFILE
    echo  "DYNOPT		= -rdynamic"  >> $CONFIGFILE
fi

if [ "$ELFSHNET" = "1" ]; then
    EXTRAOPT="$EXTRAOPT -lutil"
    echo  "EXTRAOPT = " $EXTRAOPT	  >> $CONFIGFILE
fi

;;

FreeBSD*)

    echo " [*] OS Version: $OSVER"
    echo "RANLIB  = ranlib"               >> $CONFIGFILE
if [ "$STATIC" = "0" ]; then
    echo  " [*] Enabling dynamic linking."
    echo  "DYNOPT		= -rdynamic"  >> $CONFIGFILE
fi

if [ "$ELFSHNET" = "1" ]; then
    EXTRAOPT="$EXTRAOPT -lutil"
    echo  "EXTRAOPT = " $EXTRAOPT	  >> $CONFIGFILE
fi

if [ "$OSVER" = "4" ]; then
 LPTHREAD="-lc_r"
fi

echo "#define ELFSH_MODPATH    \"/usr/local/share/elfsh/\"          "   >> $VARSFILE

MODPATHSET="1";
FREEBSD="1";
;;

*BSD*)
    echo "RANLIB  = ranlib"               >> $CONFIGFILE
;;

HP-UX*)
    echo "#define HPUX 1"		  >> $LIBVARSFILE
    echo "RANLIB  = ranlib"               >> $CONFIGFILE
;;

IRIX*)
    echo "#define IRIX 1" 		  >> $LIBVARSFILE
    echo "RANLIB  = /usr/bin/true"        >> $CONFIGFILE
;;

*)

if [ "$STATIC" = "0" ]; then
    echo  " [*] Enabling dynamic linking."
    echo  "DYNOPT                = -rdynamic"   >> $CONFIGFILE
fi

if [ "$ELFSHNET" = "1" ]; then
    EXTRAOPT="$EXTRAOPT -lutil"
    echo "EXTRAOPT = " $EXTRAOPT		>> $CONFIGFILE
fi
;;

esac


# Set default variables in case it was not precised

if [ "$MODPATHSET" != "1" ]; then
    echo "#define ELFSH_MODPATH    \"/usr/local/share/elfsh/\"" >> $VARSFILE
fi

if [ "$LIBPATHSET" != "1" ]; then
    echo "#define ELFSH_LIBPATH    \"/lib;/usr/lib;/usr/local/lib\"" >> $VARSFILE
fi

if [ "$SLOGSET" != "1" ]; then
    echo "#define ELFSH_SLOG 0" 				>> $VARSFILE
fi

if [ "$SHELLSET" != "1" ]; then
    echo "#define ELFSH_SHELL      \"/bin/bash\""		>> $VARSFILE
fi

if [ "$EDITORSET" != "1" ]; then
    echo "#define ELFSH_EDITOR      \"emacs\""			>> $VARSFILE
fi

if [ "$BUILDOP" != "1" ];  then
    echo "BUILDOP = -DM32"					>> $CONFIGFILE
fi

echo  " [*] Enabling libasm support"
echo  "LDASMOPT	= -lasm"		>> $CONFIGFILE

echo "LPTHREAD=	$LPTHREAD"		>> $CONFIGFILE

## Save BITS=
echo "BITS = " $BITS			>> $CONFIGFILE

#case "$(uname -m)" in
#i686)
#LOCALBITS=32
#*)
#LOCALBITS=32
#;;;
#esac

echo "##"							 > Makefile 
echo "## Makefile "						>> Makefile
echo "## "							>> Makefile
echo "## Started on  Fri Dec  7 06:54:35 2001 mayhem "		>> Makefile
echo "## Automatically generated from the configure script"	>> Makefile
echo "## "							>> Makefile
echo ""								>> Makefile
echo "include ./$CONFIGFILE " 					>> Makefile
echo " "							>> Makefile
echo "CC      = gcc "						>> Makefile
echo "RM      = rm -f "						>> Makefile
echo "ETAGS   = etags "					        >> Makefile
echo "CTAGS   = ctags "						>> Makefile
echo "DESTDIR = $PREFIX"                       			>> Makefile
echo "BUILD_TARGET = $BUILD_TARGET"				>> Makefile

if [ "$FREEBSD" = "1" ]; then
echo "BASEPATH = \$(DESTDIR)/usr/local"				>> Makefile
echo "MANPATH = \$(BASEPATH)/man"				>> Makefile
else
echo "BASEPATH = \$(DESTDIR)/usr/local"				>> Makefile
echo "MANPATH = \$(BASEPATH)/share/man"				>> Makefile
fi

echo "MODPATH = \$(BASEPATH)/share/elfsh/"			>> Makefile
echo "BINPATH = \$(BASEPATH)/bin/"				>> Makefile
echo "LIBPATH = \$(BASEPATH)/lib/"				>> Makefile
echo "INCPATH = \$(BASEPATH)/include/"				>> Makefile
echo "RM      = rm -f "                                		>> Makefile

echo " "							>> Makefile
echo "all     : world modules tags"				>> Makefile
echo "world   : "						>> Makefile
echo "	@echo 'Building e2dbg-libc ..' "			>> Makefile
echo "	@cd elibc && \$(MAKE) \$(BUILD_TARGET)"			>> Makefile
echo "	@echo 'Libc-elfsh has been built successfully.' "	>> Makefile
echo "	@echo 'Building liballocproxy ..' "			>> Makefile
echo "	@cd liballocproxy && \$(MAKE) "				>> Makefile
echo "	@echo 'Liballoc-proxy has been built successfully.' "	>> Makefile
echo "	@echo 'Building libaspect..' "			        >> Makefile
echo "	@cd libaspect && \$(MAKE) \$(BUILD_TARGET)"		>> Makefile
echo "	@echo 'Libaspect has been built successfully.' "	>> Makefile
echo "	@echo 'Building libasm...' "				>> Makefile
echo "	@cd libasm && \$(MAKE) "				>> Makefile
echo "	@echo 'Libasm has been built successfully.' "		>> Makefile
echo "	@echo 'Building libelfsh...' "				>> Makefile
echo "	@cd libelfsh && \$(MAKE) \$(BUILD_TARGET)"		>> Makefile
echo "	@echo 'Libelfsh has been built successfully.' "		>> Makefile

if [ "$ELFSHNET" = "1" ]; then

echo "	@echo 'Building libdumpelfsh...' "			>> Makefile
echo "	@cd libdump && \$(MAKE) -s "				>> Makefile
echo "	@echo 'Libdump has been built successfully.' "		>> Makefile

fi

echo "	@echo 'Building libui...'			"      	>> Makefile	
echo "	@cd libui && \$(MAKE) \$(BUILD_TARGET)		"	>> Makefile
echo "	@echo 'Libui has been built successfully.' 	"	>> Makefile

echo "	@echo 'Building libmjollnir...'			"      	>> Makefile
echo "	@cd libmjollnir && \$(MAKE) \$(BUILD_TARGET)	"	>> Makefile
echo "	@echo 'Libmjollnir has been built successfully.'"	>> Makefile

echo "	@echo 'Building librevm...'			"      	>> Makefile
echo "	@cd librevm && \$(MAKE) \$(BUILD_TARGET)	"	>> Makefile
echo "	@echo 'Librevm has been built successfully.'"	        >> Makefile

echo "	@echo 'Building libedfmt...'                     "	>> Makefile
echo "	@cd libedfmt && \$(MAKE) \$(BUILD_TARGET)        "	>> Makefile
echo "	@echo 'Libedfmt has been built successfully.'    "	>> Makefile

echo "	@echo 'Building ELFsh ET_EXEC'			"	>> Makefile
echo "	@cd elfsh && \$(MAKE)	\$(BUILD_TARGET)     	"       >> Makefile
echo "	@echo 'ELFsh ET_EXEC has been built successfully.' "	>> Makefile
echo " "							>> Makefile

echo "	@echo 'Building E2dbg' "				>> Makefile
echo "	@cd e2dbg && \$(MAKE) \$(BUILD_TARGET)	     	"       >> Makefile
echo "	@echo 'E2dbg has been built successfully.' "		>> Makefile
echo " "							>> Makefile

echo ".PHONY: modules "						>> Makefile
echo "modules: "						>> Makefile
echo "#	@echo 'Building ELFsh modules suite...' "		>> Makefile
echo "#	@cd modules && \$(MAKE) "				>> Makefile
echo "#	@echo 'ELFsh modules suite built successfully.' "	>> Makefile
echo " "							>> Makefile

echo "install : all prepareDir #mod_install "			>> Makefile
echo "	@cp elfsh/elfsh?? \$(BINPATH)/ "			>> Makefile
echo "	@cp e2dbg/e2dbg \$(BINPATH)/ "				>> Makefile
echo "	@cp elibc/libcelfsh*.a \$(LIBPATH) "			>> Makefile
echo "	@cp libaspect/libaspect*.a libaspect/libaspect*.so \$(LIBPATH) " >> Makefile
echo "	@cp liballocproxy/liballocproxy.a \$(LIBPATH) "		>> Makefile
echo "	@cp libelfsh/libelfsh*.a libelfsh/libelfsh*.so \$(LIBPATH) " >> Makefile
echo "	@cp libasm/libasm.a \$(LIBPATH) "			>> Makefile
echo "	@cp libmjollnir/libmjollnir*.a \$(LIBPATH) "		>> Makefile
echo "	@cp libmjollnir/libmjollnir*.so \$(LIBPATH) "		>> Makefile
echo "	@cp librevm/librevm*.a librevm/librevm*.so \$(LIBPATH)" >> Makefile
echo "	@cp libedfmt/libedfmt*.a libedfmt/libedfmt*.so \$(LIBPATH) " >> Makefile
echo "	@cp e2dbg/e2dbg*.so \$(LIBPATH) "			>> Makefile
echo "	@cp libui/libui*.a libui/libui*.so \$(LIBPATH) "	>> Makefile
echo "	@cp -R libelfsh/include/* \$(INCPATH) "			>> Makefile
echo "	@cp libasm/include/*.h \$(INCPATH)"		        >> Makefile
echo "	@cp libaspect/include/*.h \$(INCPATH)"		        >> Makefile
echo "	@cp librevm/include/*.h \$(INCPATH)"		        >> Makefile
echo "	@cp libedfmt/include/*.h \$(INCPATH) "			>> Makefile
echo "	@cp libui/include/libui.h \$(INCPATH) "			>> Makefile
echo "	@cp elibc/include/elfsh-libc.h \$(INCPATH) "		>> Makefile
echo "	@cp libmjollnir/include/libmjollnir*.h \$(INCPATH) "	>> Makefile
echo "	@cp doc/elfsh.1 \$(MANPATH)/man1/ "			>> Makefile
echo "	@chmod 644 \$(MANPATH)/man1/elfsh.1 "			>> Makefile
#echo "	@ln \$(BINPATH)/elfsh$(LOCALBITS) \$(BINPATH)/elfsh "	>> Makefile
echo "	@chmod 755 \$(BINPATH)/elfsh?? "		        >> Makefile
echo "	@chmod 644 \$(BINPATH)/e2dbg "				>> Makefile
echo "	@chmod 644 \$(LIBPATH)libelfsh*.so "			>> Makefile
echo "	@chmod 644 \$(LIBPATH)libaspect*.so "			>> Makefile
echo "	@chmod 644 \$(LIBPATH)libaspect*.a "			>> Makefile
echo "	@chmod 644 \$(LIBPATH)librevm*.so "			>> Makefile
echo "	@chmod 644 \$(LIBPATH)librevm*.a "			>> Makefile
echo "	@chmod 644 \$(LIBPATH)libedfmt*.so "			>> Makefile
echo "	@chmod 644 \$(LIBPATH)libedfmt*.a "			>> Makefile
echo "	@chmod 644 \$(LIBPATH)e2dbg*.so "			>> Makefile
echo "	@chmod 644 \$(LIBPATH)libcelfsh*.a "			>> Makefile
echo "	@chmod 644 \$(LIBPATH)libui*.so "			>> Makefile
echo "	@chmod 644 \$(LIBPATH)libui*.a "			>> Makefile
echo "	@chmod 644 \$(INCPATH)libui.h "				>> Makefile
echo "	@chmod 644 \$(INCPATH)libelfsh*.h "			>> Makefile
echo "	@chmod 644 \$(LIBPATH)libelfsh*.a "			>> Makefile
echo "	@chmod 644 \$(LIBPATH)libasm.a "			>> Makefile
echo "	@chmod 644 \$(INCPATH)libelfsh*.h "			>> Makefile
echo "	@chmod 644 \$(INCPATH)libasm*.h "			>> Makefile
echo " "                        				>> Makefile
echo "prepareDir: " 						>> Makefile
echo "	@mkdir -p \$(DESTDIR) || true"  			>> Makefile
echo "	@mkdir -p \$(BINPATH) || true"  			>> Makefile
echo "	@mkdir -p \$(LIBPATH) || true"  			>> Makefile
echo "	@mkdir -p \$(INCPATH) || true"  			>> Makefile
echo "	@mkdir -p \$(MANPATH)/man1/ || true"    	        >> Makefile
echo "	@mkdir -p \$(MODPATH) || true"  			>> Makefile

if [ "$FREEBSD" = "1" ]; then
    echo "	@ldconfig -R"                                   >> Makefile
fi

echo "	@echo 'ELFsh, E2dbg, Libelfsh, Libmjollnir, \\"         >> Makefile
echo " Libui, Librevm and Libasm installed successfully .'"	>> Makefile
echo " "							>> Makefile 

echo "mod_install: "						>> Makefile
echo "	@mkdir \$(MODPATH) 2>/dev/null || true "		>> Makefile
echo "	@cp modules/*.so \$(MODPATH) "				>> Makefile
echo "	@chmod -R 755 \$(MODPATH) "				>> Makefile
echo " "							>> Makefile

echo "uninstall: "						>> Makefile
echo "	rm -f  \$(BINPATH)/elfsh32 "				>> Makefile
echo "	rm -f  \$(BINPATH)/elfsh64 "				>> Makefile
echo "	rm -f  \$(BINPATH)/e2dbg "				>> Makefile
echo "	rm -f  \$(LIBPATH)/libelfsh* "				>> Makefile
echo "	rm -f  \$(LIBPATH)/e2dbg* "				>> Makefile
echo "	rm -f  \$(LIBPATH)/libui*"				>> Makefile
echo "	rm -f  \$(LIBPATH)/liballocproxy.a "			>> Makefile
echo "	rm -f  \$(LIBPATH)/libcelfsh*.a "			>> Makefile
echo "	rm -f  \$(LIBPATH)/libmjollnir*"			>> Makefile
echo "	rm -f  \$(LIBPATH)/libaspect*"			        >> Makefile
echo "	rm -f  \$(LIBPATH)/librevm*"			        >> Makefile
echo "	rm -f  \$(LIBPATH)/libedfmt*"				>> Makefile
echo "	rm -f  \$(LIBPATH)/libasm.a "				>> Makefile
echo "	rm -fr \$(MODPATH) "					>> Makefile
echo "	rm -f  \$(MANPATH)/man1/elfsh.1 "			>> Makefile
echo "	rm -f  \$(INCPATH)/libasm*.h "				>> Makefile
echo "	rm -f  \$(INCPATH)/libmjollnir*.h "		        >> Makefile
echo "	rm -f  \$(INCPATH)/libui.h "				>> Makefile
echo "	rm -fr \$(INCPATH)/libelfsh*"				>> Makefile
echo "	rm -fr \$(INCPATH)/libaspect*"				>> Makefile
echo "	rm -fr \$(INCPATH)/librevm*"				>> Makefile
echo "	rm -fr \$(INCPATH)/libedfmt*"				>> Makefile
 

echo "	@echo 'ELFsh, Libelfsh, Libmjollnir, Libaspect, \\"     >> Makefile
echo "Libedfmt, Libui and Libasm uninstalled successfully' "    >> Makefile
echo " "							>> Makefile

echo "clean   : cleandoc "					>> Makefile
echo "	@echo 'Cleaning tree ...' "				>> Makefile
echo "	cd elfsh     && \$(MAKE) -s clean "			>> Makefile
echo "	cd e2dbg     && \$(MAKE) -s clean "			>> Makefile
echo "	cd libelfsh  && \$(MAKE) -s clean "			>> Makefile
echo "	cd elibc     && \$(MAKE) -s clean "			>> Makefile
echo "	cd librevm   && \$(MAKE) -s clean "			>> Makefile
echo "	cd libedfmt  && \$(MAKE) -s clean "			>> Makefile
echo "	cd libaspect && \$(MAKE) -s clean "			>> Makefile
echo "	cd libui     && \$(MAKE) -s clean "			>> Makefile
echo "	cd libmjollnir && \$(MAKE) -s clean "		        >> Makefile
echo "	cd libasm    && \$(MAKE) -s clean "			>> Makefile
echo "	cd liballocproxy && \$(MAKE) -s clean "			>> Makefile
echo "	cd libdump   && \$(MAKE) -s clean "			>> Makefile
echo "	cd modules   && \$(MAKE) -s clean "			>> Makefile
echo "	@echo 'Tree cleaned .' "				>> Makefile
echo " "							>> Makefile

echo "fclean  : cleandoc "					>> Makefile
echo "	@echo 'Fcleaning tree ...' "				>> Makefile
echo "	cd elfsh     && \$(MAKE) -s fclean "			>> Makefile
echo "	cd e2dbg     && \$(MAKE) -s fclean "			>> Makefile
echo "	cd libelfsh  && \$(MAKE) -s fclean "			>> Makefile
echo "	cd elibc     && \$(MAKE) -s fclean "			>> Makefile
echo "	cd libasm    && \$(MAKE) -s fclean "			>> Makefile
echo "	cd librevm   && \$(MAKE) -s fclean "			>> Makefile
echo "	cd libedfmt  && \$(MAKE) -s fclean "			>> Makefile
echo "	cd libaspect && \$(MAKE) -s fclean "			>> Makefile
echo "	cd liballocproxy && \$(MAKE) -s fclean "	        >> Makefile
echo "	cd libmjollnir && \$(MAKE) -s fclean "		        >> Makefile
echo "	cd libdump   && \$(MAKE) -s fclean "			>> Makefile
echo "	cd libui     && \$(MAKE) -s fclean "			>> Makefile
echo "	cd modules   && \$(MAKE) -s fclean "			>> Makefile
echo "	cd testsuite && \$(MAKE) -s fclean "			>> Makefile   

echo "	@echo 'Tree cleaned .' "				>> Makefile
echo " "							>> Makefile

echo "cleandoc: "						>> Makefile
echo "	@rm -f *~ *\# \#* .\#* "				>> Makefile
echo "	@rm -f doc/*~ doc/*\# doc/\#* doc/.\#* "		>> Makefile
echo "	@rm -f doc/research/*~ doc/research/*\# "		>> Makefile
echo "	@rm -f doc/research/\#* doc/research/.\#* "		>> Makefile
echo " "							>> Makefile

echo "tags    : "						>> Makefile
echo "	@echo Doing tags ... "					>> Makefile
if [ "$ETAGS" = "1" ]; then
echo "	@\$(ETAGS) elfsh/*.c elfsh/include/*.h libelfsh/*.c \\"	>> Makefile
echo "	libelfsh/include/*.h e2dbg/include/*.h \\"		>> Makefile
echo "	modules/*.c liballocproxy/*.c libdump/*.c e2dbg/*.c \\"	>> Makefile
echo "	libasm/src/*.c liballocproxy/include/*.h \\"		>> Makefile
echo "	libaspect/*.c libaspect/include/*.h \\"		        >> Makefile
echo "	librevm/*/*.c librevm/include/*.h \\"		        >> Makefile
echo "	libedfmt/*.c libedfmt/include/*.h \\"			>> Makefile
echo "	libasm/src/arch/ia32/*.c libmjollnir/src/*.c \\"	>> Makefile
echo "	libasm/include/*.h libui/*.c libui/include/*.h \\" 	>> Makefile
echo "	libdump/include/*.h libmjollnir/include/*.h \\"		>> Makefile
echo "  elibc/include/*.h elibc/*.c"			        >> Makefile
echo " "							>> Makefile
fi

if [ "$CTAGS" = "1" ]; then
echo "	@\$(CTAGS) e2dbg/*.c e2dbg/include/*.h \\"		>> Makefile
echo "	libasm/include/*.h libasm/src/*.c \\"   		>> Makefile
echo "  libasm/src/arch/ia32/*.c \\"    			>> Makefile
echo "  libasm/src/arch/sparc/*.c\\"    			>> Makefile
echo "	elibc/include/*.h elibc/*.c\\"				>> Makefile
echo "	libdump/include/*.h libdump/*.c\\"			>> Makefile
echo "  libelfsh/include/*.h \\"    				>> Makefile
echo "	libaspect/*.c libaspect/include/*.h \\"		        >> Makefile
echo "	librevm/*/*.c librevm/include/*.h \\"		        >> Makefile
echo "	libedfmt/*.c libedfmt/include/*.h \\"			>> Makefile
echo "  libelfsh/include/libelfsh/*.h\\"    			>> Makefile
echo "  libelfsh/*.c \\" 					>> Makefile
echo "  liballocproxy/*.c liballocproxy/include/*.h \\" 	>> Makefile
echo "  libmjollnir/include/*.h libmjollnir/src/*.c \\" 	>> Makefile
echo "  libui/*.c libui/include/*.h \\" 			>> Makefile
echo "  elfsh/*.c elfsh/include/*.h \\"				>> Makefile
echo " "							>> Makefile
fi

echo "info    : "						>> Makefile
echo "	@echo '###############' TOTAL '###############'"	>> Makefile
echo "	@wc -l elfsh/*.c libelfsh/*.c libelfsh/include/*.h \\"	>> Makefile
echo "	elfsh/include/*.h modules/*.c libasm/src/*.c \\"	>> Makefile
echo "  libasm/src/arch/ia32/*.c e2dbg/*.c e2dbg/include/*.h \\">> Makefile
echo "  libaspect/*.c libmjollnir/src/*.c libaspect/*/*.h \\"   >> Makefile
echo "  librevm/*/*.c librevm/include/*.h libdump/*.c \\"	>> Makefile
echo "  libmjollnir/include/*.h libui/include/*.h libui/*.c"    >> Makefile
echo "	@echo '#########' TOTAL WITHOUT HEADERS '#######'"	>> Makefile
echo "	@wc -l elfsh/*.c libelfsh/*.c modules/*.c e2dbg/*.c \\"	>> Makefile
echo "	libaspect/*.c libasm/src/arch/ia32/*.c \\"	        >> Makefile
echo "	libasm/src/*.c libasm/src/arch/sparc/*.c \\"	        >> Makefile
echo "	librevm/*/*.c libmjollnir/src/*.c libdump/*.c"	        >> Makefile
echo "	@echo '############' LIBASPECT ONLY '############'"	>> Makefile
echo "	@wc -l libaspect/*.c "					>> Makefile
echo "	@echo '#############' LIBELFSH ONLY '#######'"	        >> Makefile
echo "	@wc -l libelfsh/*.c "					>> Makefile
echo "	@echo '###############' LIBASM ONLY '##########'"	>> Makefile
echo "	@wc -l libasm/src/*.c libasm/src/arch/ia32/*.c \\"	>> Makefile
echo "  libasm/src/arch/sparc/*.c"				>> Makefile
echo "	@echo '###############' LIBMJOLLNIR ONLY '##########'"	>> Makefile
echo "	@wc -l libmjollnir/src/*.c "				>> Makefile
echo "	@echo '###############' LIBREVM ONLY '##########'"	>> Makefile
echo "	@wc -l librevm/*/*.c "					>> Makefile
echo "	@echo '###############' LIBEDFMT ONLY ##########'"	>> Makefile
echo "	wc -l libedfmt/*.c "					>> Makefile
echo "	@echo '###############' LIBUI ONLY '##########'"	>> Makefile
echo "	@wc -l libui/*.c "					>> Makefile
echo "	@echo '###############' LIBDUMP ONLY '##########'"	>> Makefile
echo "	@wc -l libdump/*.c "					>> Makefile
echo "	@echo '###############' ELFSH only '#############'"	>> Makefile
echo "	@wc -l elfsh/*.c "					>> Makefile
echo "	@echo '###############' E2DBG only '#############'"	>> Makefile
echo "	@wc -l e2dbg/*.c "				        >> Makefile
echo "	@echo '###############' MODULES ONLY '########'"	>> Makefile
echo "	@wc -l modules/*.c "					>> Makefile
echo " "							>> Makefile

echo
echo " Now make && make install"
echo 


